/*
 * This file is generated by jOOQ.
 */
package hytssk.ind.spring.base.jooq.generated.tables


import hytssk.ind.spring.base.jooq.generated.DefaultSchema
import hytssk.ind.spring.base.jooq.generated.keys.KEY_DATA_PRIMARY
import hytssk.ind.spring.base.jooq.generated.tables.records.DataRecord

import java.time.LocalDateTime
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.AutoConverter
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Data(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DataRecord>?,
    aliased: Table<DataRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DataRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>data</code>
         */
        val DATA: Data = Data()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DataRecord> = DataRecord::class.java

    /**
     * The column <code>data.id</code>.
     */
    val ID: TableField<DataRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>data.flag</code>.
     */
    val FLAG: TableField<DataRecord, Boolean?> = createField(DSL.name("flag"), SQLDataType.TINYINT.nullable(false), this, "", AutoConverter<Byte, Boolean>(Byte::class.java, Boolean::class.java))

    /**
     * The column <code>data.created_at</code>.
     */
    val CREATED_AT: TableField<DataRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>data.updated_at</code>.
     */
    val UPDATED_AT: TableField<DataRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<DataRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>data</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>data</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>data</code> table reference
     */
    constructor(): this(DSL.name("data"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DataRecord>): this(Internal.createPathAlias(child, key), child, key, DATA, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<DataRecord> = KEY_DATA_PRIMARY
    override fun `as`(alias: String): Data = Data(DSL.name(alias), this)
    override fun `as`(alias: Name): Data = Data(alias, this)
    override fun `as`(alias: Table<*>): Data = Data(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Data = Data(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Data = Data(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Data = Data(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, Boolean?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row4<Long?, Boolean?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Boolean?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Boolean?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
